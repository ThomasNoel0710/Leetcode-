2937.(Easy)
题目大意：字符串（比对前面的值一直到不相等）
My solution:
思路：从开始检查字符串前面的值是否相等，直到不等，记录检查了多少次，然后用size相减
class Solution {
public:
    int findMinimumOperations(string s1, string s2, string s3) {
        const int size1 = s1.size();
        const int size2 = s2.size();
        const int size3 = s3.size();
        int len= min(size1,min(size2,size3));
        int ptr = 0;

        if(s1[0]!=s2[0]||s2[0]!=s3[0]||s1[0]!=s3[0]) return -1;

        while(ptr<len){
            if(s1[ptr]==s2[ptr]&&s2[ptr]==s3[ptr]&&s1[ptr]==s3[ptr]) ptr++;
            else break;
        }

        return (abs(size1-ptr)+abs(size2-ptr)+abs(size3-ptr));
    }
};




1556.(Easy)
题目大意：给一个数字，在每三位后插入一个千分号'.'，比如1234567-->1.234.567
My solution：
思路：从后往前每三位加一个点号，题目很简单，注意迭代器的范围和用法，以及to_string()和insert()的使用
class Solution {
public:
    string thousandSeparator(int n) {
        string tem = to_string(n);
        const int len = tem.size();
        if(len<4) return tem;;

        int times = (len-1)/3;

        for(int i=0;i<times;i++){
            tem.insert(tem.begin()+len-3-3*i,'.');
        }


        return tem;
    }
};




1268. (Medium)
题目大意：搜索引擎建议系统，根据输入的字母给出三个提示词
My solution:
思路：暴力破解
class Solution {
public:
    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {
        vector<vector<string>> result;
        vector<string> res;
        string typing;

        int len1 = products.size();
        int len2 = searchWord.size();
        int count;

        sort(products.begin(),products.end());

        for(int i=0;i<len2;i++){
            count = 0;
            typing += searchWord[i];
            for (int j=0;j<len1;j++){
                for(int n=0;n<typing.size();n++){
                    if(products[j][n] != typing[n]) break;
                    else if(n==typing.size()-1){
                        res.push_back(products[j]);
                        count++;
                    }
                }
                if(count>2) break;
            }
            result.push_back(res);
            res = {};
        }

        return(result);
    }
};




784.(Medium)
题目大意：将字符串的大小写都返回，如"a1b2"，返回"a1b2""A1b2""A1B2""a1B2"
思路：迭代循环
class Solution {
public:
    vector<string> letterCasePermutation(string s) {
        int len = s.size();
        vector<string> res;

        processing(s,res,len,0);
        return res;
    }
    void processing(string &s,vector<string> &res,int len,int index){
        if(len==0) res.push_back(s);
        else if(isalpha(s[index])){
            s[index] = toupper(s[index]);
            processing(s,res,len-1,index+1);
            s[index] = tolower(s[index]);
            processing(s,res,len-1,index+1);
        }
        else{
            processing(s,res,len-1,index+1);
        }
}
};




791.(Medium)
题目大意：给两个字符串，如order = "cba", s = "abcd"，其中在order中的按顺序排列，不在的随便，如这里是"cba"，d随便放哪
思路：先s分成两份，在order中出现过的和没出现过的，然后前者排列，再加后者
class Solution {
public:
    string customSortString(string order, string s) {
        map<char,int> dic;
        string tem = "";
        string tem3 = "";

        for(char c:order){
            dic[c] = dic[c]+1;
        }
        for(char c:s){
            if(dic[c]!=0) {
                tem+= c;
            }
            else tem3+= c;

         }
        string tem2 = "";
        for(char c:order){
            for(char s:tem){
                if(s==c) tem2 += s;
            }
        }
        string res;
        res = tem2+tem3;
        return(res);

    }
};

1447.(Medium)
题目大意 给定一个数，输出所有最简的分数
如n=4，输出["1/2","1/3","1/4","2/3","3/4"]
思路：与上上题类似，不断迭代
class Solution {
public:
    vector<string> simplifiedFractions(int n) {
        vector<string> res;
        if(n==1) return res;
        res.push_back("1/2");
        if(n>2) processing(n,res);
        return res;

    }

    void processing(int n,vector<string> &res){
        if(n==2) return;
        else{
            vector<int> tem;
            tem.push_back(1);
            for(int i=2;i<n;i++){
                if(gcd(i,n)==1) tem.push_back(i);
            }
            for(const auto& num:tem){
                string str = "";
                str = to_string(num)+'/'+to_string(n);
                res.push_back(str);
            }
            processing(n-1,res);
        }
    }

//这个函数判断是否有公因数
    int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

};




657.(Easy)
题目大意 给定一个机器人 分别向上下左右(UDLR)走 判断是否返回原点
思路：map存储值 比对 很简单
class Solution {
public:
    bool judgeCircle(string moves) {
        map<char,int> list;
        for(char c:moves){
            list[c]++;
        }
        if(list['U']==list['D']&&list['L']==list['R']) return true;
        return false;
    }
};




2483.(Medium)
题目大意 给定一个字符串，只包含'Y'和'N',判断商店几点关门，关门前没人来或者关门后有人来都会有惩罚，求惩罚的最小值
第一次提交的代码：程序没错，但复杂度O(N2)，超时了
class Solution {
public:
    int bestClosingTime(string customers) {
        customers+='N';
        int hour = 0;
        int fine = 1000000;
        int len= customers.size();
        for(int i=0;i<len;i++){
            if(calfine(i,customers,len)<fine){
                hour = i;
                fine = calfine(hour,customers,len);
            }
            if(fine==0) break;
        }
        return hour;
    }

    int calfine(int hour,string &customers,int len){
        int fine = 0;
        for(int i=0;i<len;i++){
            if(i<hour){
                if(customers[i]=='N') fine++;
            }
            else{
                if(customers[i]=='Y') fine++;
            }
        }
        return fine;
    }
};
