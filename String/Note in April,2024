2678. Easy
题目大意：给一个类似于身份证号的东西，判断老年人数量
Solution:比较值得注意的是要把字符转化成数字这一点
class Solution {
public:
    int countSeniors(vector<string>& details) {
        int count = 0;
        for(int i=0;i<details.size();i++){
            if((details[i][11]-'0')*10+(details[i][12]-'0')>60) count++;
        }
        return count;
    }
};



383.(Easy)
题目大意：查询第一个字符串是否为第二个的子集
Solution:注意数据结构和语法
class Solution {
public:
    bool canConstruct(string ransomNote, string magazine) {
        map<char,int> map1,map2;
        map1 = constuct(ransomNote);
        map2 = constuct(magazine);
        for(auto p = map1.begin();p!=map1.end();p++){
            if(p->second>map2[p->first]) return false;
        }
        return true;


    }
    map<char,int> constuct(string sentence){
        map<char,int> res;
        int len = sentence.size();
        for(int i=0;i<len;i++){
            res[sentence[i]]++;
        }
        return res;
    }
};



290.(Easy)
比较字符串模式是否相同，要注意给定的第二个是string，要将其转化为数组
class Solution {
public:
    bool wordPattern(string pattern, string s) {
        vector<string> dic;
        s = s+' ';
        const int len = s.size();
        const int siz = pattern.size();
        string tem = "";
        for(int i=0;i<len;i++){
            if(s[i]==' '){
                dic.push_back(tem);
                tem="";
                continue;
            }
            tem += s[i];
        }
        if(dic.size()!=pattern.size()) return false;
        for(int i=0;i<siz-1;i++){
            for(int j=i+1;j<siz;j++){
                if(pattern[i]==pattern[j]&&dic[i]!=dic[j]) return false;
                if(pattern[i]!=pattern[j]&&dic[i]==dic[j]) return false;
            }
        }
        return true;
    }
};



125.检测是否为回文串
class Solution {
public:
    bool isPalindrome(string s) {
        string sentence = "";
        const int len = s.size();
        bool signal = true;

        for(int i=0;i<len;i++){
            if(isalpha(s[i])||isdigit(s[i])) sentence += tolower(s[i]);
        }

        int pointer1=0;
        int pointer2=sentence.size()-1;

        while(pointer1<pointer2){
            if(sentence[pointer1]!=sentence[pointer2]){
                signal = false;
                break;
            }
            pointer1++;
            pointer2--;
        }

        return signal;
    }
};
