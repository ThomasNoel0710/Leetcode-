75 Sorted Colores(Medium)
题目大意 将给定数组按照[0,0,1,1,2,2]的顺序排列，要求在原地排列
Solution:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int length = nums.size();
        sortnum(nums,0,length);
        sortnum(nums,1,length);
    }
    void sortnum(vector<int> &nums,int value,int length){
        for(int i=0;i<length-1;i++){
            for(int j=i+1;j<length;j++){
                if(nums[i]>value&&nums[j]==value) swap(nums[i],nums[j]);
            }
        }
    }
    void swap(int &a,int &b){
        int tem;
        tem = a;
        a = b;
        b = tem;
    }
};

2363 Easy
题目大意：给定两个二维数组 其中前一个值为序号，后一个值为值，要求返回一个二位数组，序号不变，序号同样的值相加
Solution:
class Solution {
public:
    vector<vector<int>> mergeSimilarItems(vector<vector<int>>& items1, vector<vector<int>>& items2) {
        map<int,int> list;
        vector<vector<int>> res;
        int length = items1.size();
        for(int i=0;i<length;i++){
            list[items1[i][0]]  = list[items1[i][0]]+items1[i][1];
        }
        length = items2.size();
        for(int i=0;i<length;i++){
            list[items2[i][0]] = list[items2[i][0]]+items2[i][1];
        }
        for(const auto&pair:list){
            res.push_back({pair.first,pair.second});
        }
        return res;
    }
};

1725 Easy
题目大意：选择最长的方形的个数
Solution:
class Solution {
public:
    int countGoodRectangles(vector<vector<int>>& rectangles) {
        int length = rectangles.size();
        vector<int> res;
        for(int i=0;i<length;i++){
            res.push_back(min(rectangles[i][0],rectangles[i][1]));
        }
        int length2 = res.size();
        sort(res.begin(),res.end());
        int value = res.back();
        int count = 0;
        for(int i=0;i<length2;i++){
            if(res[i]==value) count++;
        }
        return count;
    }
};



56.(Medium)
题目大意：给定一个二维数组，合并相同区间
思路：每次合并之后，在原数组中删除原来的两个元素，添加新的元素，然后递归调用函数直至全部循环完毕
Solution:
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int len = intervals.size();
        bool merged = false;
        sort(intervals.begin(),intervals.end());
        for(int i=0;i<len-1;i++){
            for(int j=i+1;j<len;j++){
                if(intervals[j][0]>=intervals[i][0]&&intervals[j][0]<=intervals[i][1]){
                    intervals.push_back({intervals[i][0],max(intervals[j][1],intervals[i][1])});
                    intervals.erase(intervals.begin()+i);
                    intervals.erase(intervals.begin()+j-1);
                    i=0;
                    len = len-1;
                    merged = true;
                    break;
                }
            }
        }
        if(merged) merge(intervals);
        return intervals;
    }
};



406.(Medium)
题目大意：有点复杂，建议去网站看
Solution:
贪心算法
class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(), people.end(), [](const vector<int> &a, const vector<int> &b) {
            return a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]);
        });
        vector<vector<int>> res;
        int len = people.size();
        for (int i = 0; i < len; i++) {
            res.insert(res.begin() + people[i][1], people[i]);
        }
        return res;
    }
};



2744.(Easy)
判断字符串是否为反转，输出反转的对数
Solution:
class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        int count = 0;
        int len = words.size();
        string tem;
        
        for(int i=0;i<len-1;i++){
            for(int j=i+1;j<len;j++){
                if(words[i][0]!=words[i][1]){
                    if(words[i][0]==words[j][1]&&words[i][1]==words[j][0]){
                        count++;
                    }
                }
            }
        }

        return count;
    }
};



807.(Medium)
盖多少层楼可以在不改变天际线的基础上达到最大值？
Solution:
class Solution {
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>> &grid) {
        int res = 0;
        int n = grid.size();
        int times = n*n;
        for(int i=0;i<times;i++){
            res += findvalue(i,grid,n);
        }

        return res;
    }
    int findvalue(int num,vector<vector<int>> &grid,int n){
        int line = num/n;
        int row = num%n;
        int max1=0;
        int max2=0;
        for(int i=0;i<n;i++){
            if(grid[line][i]>max1) max1 = grid[line][i];
        }
        for(int i=0;i<n;i++){
            if(grid[i][row]>max2) max2 = grid[i][row];
        }
        return(min(max1,max2)-grid[line][row]);
    }
};



80(Medium)
Solution:(遍历 注意指针位置)
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int count = 0;
        int count2 = 0;
        int len = nums.size();
        int value=nums[0];
        int l=0;
        for(int i=0;i<len;i++){
            if(nums[i-l]==value){
                count++;
                if(count>2){
                    nums.erase(nums.begin()+i-l);
                    nums.insert(nums.end(),999999);
                    count2++;
                    l++;
                }
            }
            else{
                value = nums[i-l];
                count=1;
            }
        }
        return(len-count2);
    }
};



69.(Easy)
二分查找 找出开平方的数
class Solution {
public:
    int mySqrt(int x) {
        if(x==0) return 0;
        if(x<4) return 1;
        int left,right;
        int mid,res;
        left =0;
        right = x;
        while(left<right){
            mid = left + (right-left)/2;
            if(mid==x/mid){
                res = mid;
                break;
            }
            else if(mid>x/mid) right = mid;
            else if(mid<x/mid) left = mid;
            if(right-left==1) {
                res = left;
                break;
            }
        }
        return res;
    }
};



274.(Medium)
感觉挺简单 应该算easy
class Solution {
public:
    int hIndex(vector<int>& citations) {
        int len = citations.size();
        sort(citations.begin(),citations.end());
        int res = 0;
        int cit,num,h;
        for(int i=0;i<len;i++){
            cit=citations[i];
            num = len-i;
            res = max(res,min(cit,num));
        }
        return res;
    }
};
